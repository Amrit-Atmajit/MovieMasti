package com.moviemasti.bookings.exception;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Standardized error response format for the API.
 * Follows the RFC 7807 Problem Details for HTTP APIs specification.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
@Schema(description = "Standardized error response format for the API")
public class ErrorResponse {
    
    @Schema(description = "A URI reference that identifies the problem type", 
            example = "https://api.moviemasti.com/errors/invalid-request")
    private String type;
    
    @Schema(description = "A short, human-readable summary of the problem type",
            example = "Invalid Request")
    private String title;
    
    @Schema(description = "The HTTP status code generated by the origin server for this occurrence of the problem",
            example = "400")
    private int status;
    
    @Schema(description = "A human-readable explanation specific to this occurrence of the problem",
            example = "The request contains invalid parameters")
    private String detail;
    
    @Schema(description = "A URI reference that identifies the specific occurrence of the problem",
            example = "/api/bookings/123")
    private String instance;
    
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm:ss")
    @Schema(description = "The timestamp when the error occurred",
            example = "2025-01-01 12:00:00")
    private LocalDateTime timestamp = LocalDateTime.now();
    
    @Schema(description = "List of field-specific errors")
    private List<ValidationError> errors;
    
    /**
     * Add a validation error to the response
     * @param field The field with the error
     * @param message The error message
     */
    public void addValidationError(String field, String message) {
        if (errors == null) {
            errors = new ArrayList<>();
        }
        errors.add(new ValidationError(field, message));
    }
    
    /**
     * Create a builder for ErrorResponse
     * @return A new ErrorResponseBuilder instance
     */
    public static ErrorResponseBuilder builder() {
        return new ErrorResponseBuilder();
    }
    
    /**
     * Builder class for ErrorResponse
     */
    public static class ErrorResponseBuilder {
        private String type;
        private String title;
        private int status;
        private String detail;
        private String instance;
        private final List<ValidationError> errors = new ArrayList<>();
        
        public ErrorResponseBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        public ErrorResponseBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        public ErrorResponseBuilder status(int status) {
            this.status = status;
            return this;
        }
        
        public ErrorResponseBuilder detail(String detail) {
            this.detail = detail;
            return this;
        }
        
        public ErrorResponseBuilder timestamp(LocalDateTime timestamp) {
            // This method is added to satisfy the builder pattern
            // The timestamp is already set to LocalDateTime.now() by default
            return this;
        }
        
        public ErrorResponseBuilder instance(String instance) {
            this.instance = instance;
            return this;
        }
        
        public ErrorResponseBuilder addError(String field, String message) {
            this.errors.add(new ValidationError(field, message));
            return this;
        }
        
        public ErrorResponse build() {
            ErrorResponse response = new ErrorResponse(type, title, status, detail, instance, LocalDateTime.now(), null);
            if (!errors.isEmpty()) {
                response.setErrors(new ArrayList<>(errors));
            }
            return response;
        }
    }
    
    /**
     * Represents a field validation error
     */
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @Schema(description = "Represents a validation error for a specific field")
    public static class ValidationError {
        @Schema(description = "The field with the error", example = "email")
        private String field;
        
        @Schema(description = "The error message", example = "Email must be a valid email address")
        private String message;
    }
}
