<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36" version="28.2.5">
  <diagram name="Page-1" id="comprehensive-lld">
    <mxGraphModel dx="2037" dy="1130" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="5000" pageHeight="4000" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="main-title" value="&lt;b style=&quot;color: rgb(255, 255, 255); font-size: 12px;&quot;&gt;&lt;font style=&quot;font-size: 20px;&quot;&gt;AmritMovieMasti - Low Level Design&lt;/font&gt;&lt;/b&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=light-dark(#000000,#CCCCFF);strokeColor=#000000;fontSize=18;fontStyle=1;fontColor=#FFFFFF;verticalAlign=middle;" parent="1" vertex="1">
          <mxGeometry x="40" y="20" width="3460" height="60" as="geometry" />
        </mxCell>
        <mxCell id="booking-write-title" value="BOOKING SERVICE - WRITE MODEL (CQRS Command Side)" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#1ba1e2;strokeColor=#006EAF;fontSize=16;fontStyle=1;fontColor=#ffffff;" parent="1" vertex="1">
          <mxGeometry x="40" y="120" width="900" height="40" as="geometry" />
        </mxCell>
        <mxCell id="booking-aggregate" value="BookingService" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#fff2cc;strokeColor=#d6b656;" parent="1" vertex="1">
          <mxGeometry x="40" y="180" width="420" height="560" as="geometry" />
        </mxCell>
        <mxCell id="booking-aggregate-attrs" value="- bookingId: UUID {AGGREGATE_ID}&#xa;- userId: UUID&#xa;- showId: UUID&#xa;- status: BookingStatus&#xa;- seats: List&lt;BookingSeat&gt;&#xa;- pricing: PricingDetails&#xa;- paymentId: UUID&#xa;- bookingReference: String&#xa;- version: Long {OPTIMISTIC_LOCK}&#xa;- uncommittedEvents: List&lt;DomainEvent&gt;&#xa;- createdAt: Instant&#xa;- expiresAt: Instant&#xa;&#xa;// SAGA State&#xa;- sagaId: UUID&#xa;- sagaStep: BookingSagaStep&#xa;- compensationData: Map&lt;String, Object&gt;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="booking-aggregate" vertex="1">
          <mxGeometry y="40" width="420" height="260" as="geometry" />
        </mxCell>
        <mxCell id="booking-aggregate-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="booking-aggregate" vertex="1">
          <mxGeometry y="300" width="420" height="8" as="geometry" />
        </mxCell>
        <mxCell id="booking-aggregate-methods" value="// Commands&#xa;+ handle(CreateBookingCommand): void&#xa;+ handle(ConfirmBookingCommand): void&#xa;+ handle(CancelBookingCommand): void&#xa;+ handle(CompensateBookingCommand): void&#xa;&#xa;// Domain Logic&#xa;- validateBooking(): void&#xa;- lockSeats(seats: List&lt;UUID&gt;): void&#xa;- confirmBooking(paymentId: UUID): void&#xa;- cancelBooking(reason: String): void&#xa;- compensate(): void&#xa;&#xa;// Event Sourcing&#xa;+ getUncommittedEvents(): List&lt;DomainEvent&gt;&#xa;+ markEventsAsCommitted(): void&#xa;+ loadFromHistory(events: List&lt;DomainEvent&gt;): void&#xa;&#xa;// Events Published&#xa;- apply(BookingCreatedEvent)&#xa;- apply(SeatsLockedEvent)&#xa;- apply(BookingConfirmedEvent)&#xa;- apply(BookingCancelledEvent)&#xa;- apply(BookingCompensatedEvent)" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="booking-aggregate" vertex="1">
          <mxGeometry y="308" width="420" height="252" as="geometry" />
        </mxCell>
        <mxCell id="booking-command-handler" value="BookingCommandHandler" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#e1d5e7;strokeColor=#9673a6;" parent="1" vertex="1">
          <mxGeometry x="500" y="180" width="440" height="380" as="geometry" />
        </mxCell>
        <mxCell id="booking-command-handler-deps" value="- bookingRepository: BookingRepository&#xa;- eventStore: EventStore&#xa;- sagaOrchestrator: BookingSagaOrchestrator&#xa;- domainEventPublisher: DomainEventPublisher&#xa;- idempotencyService: IdempotencyService&#xa;- distributedLockManager: DistributedLockManager" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="booking-command-handler" vertex="1">
          <mxGeometry y="40" width="440" height="100" as="geometry" />
        </mxCell>
        <mxCell id="booking-command-handler-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="booking-command-handler" vertex="1">
          <mxGeometry y="140" width="440" height="8" as="geometry" />
        </mxCell>
        <mxCell id="booking-command-handler-methods" value="@CommandHandler&#xa;+ handle(CreateBookingCommand): BookingId&#xa;+ handle(ConfirmBookingCommand): void&#xa;+ handle(CancelBookingCommand): void&#xa;&#xa;- loadAggregate(bookingId: UUID): BookingAggregate&#xa;- saveAggregate(aggregate: BookingAggregate): void&#xa;- publishEvents(events: List&lt;DomainEvent&gt;): void&#xa;- startSaga(aggregate: BookingAggregate): void&#xa;&#xa;@Transactional&#xa;@Idempotent(key = &quot;#command.idempotencyKey&quot;)&#xa;@DistributedLock(key = &quot;booking:#command.bookingId&quot;)" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="booking-command-handler" vertex="1">
          <mxGeometry y="148" width="440" height="232" as="geometry" />
        </mxCell>
        <mxCell id="eventstore-entity" value="&lt;&lt;Event Store&gt;&gt;&#xa;EventStore (Event Sourcing)" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#f8cecc;strokeColor=#b85450;" parent="1" vertex="1">
          <mxGeometry x="40" y="780" width="480" height="408" as="geometry" />
        </mxCell>
        <mxCell id="eventstore-attrs" value="- eventId: UUID {PK}&#xa;- aggregateId: UUID {INDEXED}&#xa;- aggregateType: String&#xa;- eventType: String&#xa;- eventData: JSONB&#xa;- eventMetadata: JSONB&#xa;- version: Long {OPTIMISTIC_LOCK}&#xa;- timestamp: Instant {INDEXED}&#xa;- correlationId: UUID&#xa;- causationId: UUID&#xa;- userId: UUID&#xa;&#xa;{UNIQUE CONSTRAINT: (aggregateId, version)}&#xa;{INDEX: (aggregateId, version ASC)}&#xa;{INDEX: (eventType, timestamp DESC)}&#xa;{PARTITION BY: aggregateType, timestamp}" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="eventstore-entity" vertex="1">
          <mxGeometry y="40" width="480" height="260" as="geometry" />
        </mxCell>
        <mxCell id="eventstore-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="eventstore-entity" vertex="1">
          <mxGeometry y="300" width="480" height="8" as="geometry" />
        </mxCell>
        <mxCell id="eventstore-methods" value="+ append(event: DomainEvent): void&#xa;+ getEvents(aggregateId: UUID): List&lt;DomainEvent&gt;&#xa;+ getEvents(aggregateId, fromVersion): List&lt;DomainEvent&gt;&#xa;+ getAllEvents(eventType, from, to): Stream&lt;DomainEvent&gt;&#xa;&#xa;// Ensures append-only, immutable event log" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="eventstore-entity" vertex="1">
          <mxGeometry y="308" width="480" height="100" as="geometry" />
        </mxCell>
        <mxCell id="saga-section-title" value="SAGA ORCHESTRATOR - DISTRIBUTED TRANSACTION MANAGEMENT" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#d80073;strokeColor=#A50040;fontSize=16;fontStyle=1;fontColor=#ffffff;" parent="1" vertex="1">
          <mxGeometry x="1000" y="120" width="1000" height="40" as="geometry" />
        </mxCell>
        <mxCell id="booking-saga-orchestrator" value="BookingSagaOrchestrator" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#ffe6cc;strokeColor=#d79b00;" parent="1" vertex="1">
          <mxGeometry x="1000" y="180" width="500" height="660" as="geometry" />
        </mxCell>
        <mxCell id="booking-saga-deps" value="- sagaStateRepository: SagaStateRepository&#xa;- commandGateway: CommandGateway&#xa;- eventPublisher: EventPublisher&#xa;- compensationHandler: CompensationHandler&#xa;- retryPolicy: RetryPolicy&#xa;- circuitBreaker: CircuitBreaker" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="booking-saga-orchestrator" vertex="1">
          <mxGeometry y="40" width="500" height="100" as="geometry" />
        </mxCell>
        <mxCell id="booking-saga-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="booking-saga-orchestrator" vertex="1">
          <mxGeometry y="140" width="500" height="8" as="geometry" />
        </mxCell>
        <mxCell id="booking-saga-methods" value="// Saga Steps (Forward Flow)&#xa;@SagaEventHandler(BookingCreatedEvent)&#xa;+ onBookingCreated(event): void {&#xa;  sendCommand(LockSeatsCommand) → SeatService&#xa;}&#xa;&#xa;@SagaEventHandler(SeatsLockedEvent)&#xa;+ onSeatsLocked(event): void {&#xa;  sendCommand(InitiatePaymentCommand) → PaymentService&#xa;}&#xa;&#xa;@SagaEventHandler(PaymentSuccessEvent)&#xa;+ onPaymentSuccess(event): void {&#xa;  sendCommand(ConfirmBookingCommand) → BookingService&#xa;  sendCommand(SendConfirmationCommand) → NotificationService&#xa;}&#xa;&#xa;// Compensating Transactions (Backward Flow)&#xa;@SagaEventHandler(PaymentFailedEvent)&#xa;+ onPaymentFailed(event): void {&#xa;  sendCommand(ReleaseSeatsCommand) → SeatService&#xa;  sendCommand(CancelBookingCommand) → BookingService&#xa;}&#xa;&#xa;@SagaEventHandler(SeatLockFailedEvent)&#xa;+ onSeatLockFailed(event): void {&#xa;  sendCommand(CancelBookingCommand) → BookingService&#xa;}&#xa;&#xa;- updateSagaState(sagaId, step, status): void&#xa;- handleCompensation(sagaId): void&#xa;- persistSagaState(state: SagaState): void&#xa;&#xa;@Transactional&#xa;@Retryable(maxAttempts = 3)" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="booking-saga-orchestrator" vertex="1">
          <mxGeometry y="148" width="500" height="512" as="geometry" />
        </mxCell>
        <mxCell id="saga-state-entity" value="&lt;&lt;Entity&gt;&gt;&#xa;SagaState (Persistent)" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="1540" y="180" width="460" height="440" as="geometry" />
        </mxCell>
        <mxCell id="saga-state-attrs" value="- sagaId: UUID {PK}&#xa;- sagaType: String = BOOKING_SAGA&#xa;- bookingId: UUID {INDEXED}&#xa;- userId: UUID&#xa;- currentStep: SagaStep&#xa;- status: SagaStatus&#xa;- completedSteps: List&lt;SagaStep&gt;&#xa;- compensatedSteps: List&lt;SagaStep&gt;&#xa;- stepData: Map&lt;String, Object&gt;&#xa;- compensationData: Map&lt;String, Object&gt;&#xa;- retryCount: Integer&#xa;- lastError: String&#xa;- createdAt: Instant&#xa;- updatedAt: Instant&#xa;- completedAt: Instant&#xa;- version: Long {OPTIMISTIC_LOCK}&#xa;&#xa;// Saga Steps Flow&#xa;STEPS: [&#xa;  CREATE_BOOKING → LOCK_SEATS → INITIATE_PAYMENT →&#xa;  CONFIRM_BOOKING → SEND_NOTIFICATION → COMPLETED&#xa;]" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="saga-state-entity" vertex="1">
          <mxGeometry y="40" width="460" height="320" as="geometry" />
        </mxCell>
        <mxCell id="saga-state-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="saga-state-entity" vertex="1">
          <mxGeometry y="360" width="460" height="8" as="geometry" />
        </mxCell>
        <mxCell id="saga-state-methods" value="+ moveToNextStep(): void&#xa;+ recordCompensation(step: SagaStep): void&#xa;+ canRetry(): boolean&#xa;+ isCompleted(): boolean" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="saga-state-entity" vertex="1">
          <mxGeometry y="368" width="460" height="72" as="geometry" />
        </mxCell>
        <mxCell id="seat-service-title" value="SEAT SERVICE - DISTRIBUTED LOCK &amp; CONCURRENCY CONTROL" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#6a00ff;strokeColor=#3700CC;fontSize=16;fontStyle=1;fontColor=#ffffff;" parent="1" vertex="1">
          <mxGeometry x="1000" y="850" width="1000" height="40" as="geometry" />
        </mxCell>
        <mxCell id="seat-lock-service" value="&lt;&lt;Service&gt;&gt;&#xa;SeatLockService" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#e1d5e7;strokeColor=#9673a6;" parent="1" vertex="1">
          <mxGeometry x="1000" y="910" width="520" height="720" as="geometry" />
        </mxCell>
        <mxCell id="seat-lock-service-deps" value="- showSeatRepository: ShowSeatRepository&#xa;- redisLockManager: RedisLockManager&#xa;- eventPublisher: EventPublisher&#xa;- lockConfig: LockConfiguration&#xa;  - lockTimeout: 600 seconds&#xa;  - maxRetries: 3&#xa;  - retryBackoff: ExponentialBackoff(100ms, 2.0)" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="seat-lock-service" vertex="1">
          <mxGeometry y="40" width="520" height="120" as="geometry" />
        </mxCell>
        <mxCell id="seat-lock-service-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="seat-lock-service" vertex="1">
          <mxGeometry y="160" width="520" height="8" as="geometry" />
        </mxCell>
        <mxCell id="seat-lock-service-methods" value="@CommandHandler&#xa;+ handle(LockSeatsCommand): LockSeatsResult&#xa;+ handle(ReleaseSeatsCommand): void&#xa;&#xa;// Two-Phase Locking Protocol&#xa;- acquireDistributedLocks(seatIds): Map&lt;UUID, Lock&gt;&#xa;- updateDatabaseSeatStatus(seatIds, LOCKED): void&#xa;- releaseDistributedLocks(lockTokens): void&#xa;&#xa;@Transactional(isolation = SERIALIZABLE)&#xa;private LockResult lockSeatsWithOptimisticLock(&#xa;    showId: UUID, seatIds: List&lt;UUID&gt;, userId: UUID) {&#xa;  &#xa;  // Step 1: Acquire Redis locks (fast fail)&#xa;  Map&lt;UUID, String&gt; redisLocks = acquireRedisLocks(seatIds);&#xa;  if (!allLocksAcquired(redisLocks)) {&#xa;    rollbackLocks(redisLocks);&#xa;    throw SeatLockException(&quot;Seats unavailable&quot;);&#xa;  }&#xa;  &#xa;  // Step 2: Update DB with optimistic locking&#xa;  try {&#xa;    int updated = showSeatRepo.updateSeatsStatus(&#xa;      showId, seatIds, LOCKED, userId, expiresAt);&#xa;    if (updated != seatIds.size()) {&#xa;      throw OptimisticLockException();&#xa;    }&#xa;    publishEvent(new SeatsLockedEvent(...));&#xa;    return LockResult.success(redisLocks);&#xa;  } catch (OptimisticLockException e) {&#xa;    rollbackLocks(redisLocks);&#xa;    throw e;&#xa;  }&#xa;}&#xa;&#xa;@Scheduled(fixedRate = 60000)&#xa;+ cleanupExpiredLocks(): void" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="seat-lock-service" vertex="1">
          <mxGeometry y="168" width="520" height="552" as="geometry" />
        </mxCell>
        <mxCell id="redis-lock-manager" value="&lt;&lt;Component&gt;&gt;&#xa;RedisLockManager (Redlock)" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#f8cecc;strokeColor=#b85450;" parent="1" vertex="1">
          <mxGeometry x="1560" y="910" width="440" height="430" as="geometry" />
        </mxCell>
        <mxCell id="redis-lock-attrs" value="- redissonClient: RedissonClient&#xa;- lockKeyPattern: &quot;LOCK:show:{showId}:seat:{seatId}&quot;&#xa;- lockLeaseTime: 600 seconds&#xa;- waitTime: 5 seconds&#xa;&#xa;// Redlock Algorithm Implementation&#xa;// Ensures distributed lock across multiple Redis instances" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="redis-lock-manager" vertex="1">
          <mxGeometry y="40" width="440" height="120" as="geometry" />
        </mxCell>
        <mxCell id="redis-lock-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="redis-lock-manager" vertex="1">
          <mxGeometry y="160" width="440" height="8" as="geometry" />
        </mxCell>
        <mxCell id="redis-lock-methods" value="+ acquireLock(key, userId, ttl): Optional&lt;String&gt;&#xa;+ releaseLock(key, token): boolean&#xa;+ extendLock(key, token, ttl): boolean&#xa;+ isLocked(key): boolean&#xa;&#xa;// Lua Script for Atomic Operations&#xa;private String LOCK_SCRIPT = &quot;&quot;&quot;&#xa;  if redis.call(exists, KEYS[1]) == 0 then&#xa;    redis.call(hset, KEYS[1], token, ARGV[1])&#xa;    redis.call(hset, KEYS[1], userId, ARGV[2])&#xa;    redis.call(expire, KEYS[1], ARGV[3])&#xa;    return 1&#xa;  else&#xa;    return 0&#xa;  end&#xa;&quot;&quot;&quot;;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="redis-lock-manager" vertex="1">
          <mxGeometry y="168" width="440" height="262" as="geometry" />
        </mxCell>
        <mxCell id="showseat-write-model" value="&lt;&lt;Entity&gt;&gt;&#xa;ShowSeat" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#fff2cc;strokeColor=#d6b656;" parent="1" vertex="1">
          <mxGeometry x="1000" y="1642" width="440" height="350" as="geometry" />
        </mxCell>
        <mxCell id="showseat-write-attrs" value="- showSeatId: UUID {PK}&#xa;- showId: UUID {FK, COMPOSITE INDEX}&#xa;- seatId: UUID {FK}&#xa;- status: SeatStatus {DEFAULT: AVAILABLE}&#xa;- lockedBy: UUID&#xa;- lockedAt: Instant&#xa;- lockExpiresAt: Instant&#xa;- version: Long {OPTIMISTIC_LOCK}&#xa;&#xa;{UNIQUE: (showId, seatId)}&#xa;{INDEX: (showId, status, lockExpiresAt)}&#xa;{PARTIAL INDEX: (lockExpiresAt) WHERE status=LOCKED}&#xa;&#xa;// Optimistic Locking Query&#xa;UPDATE show_seats&#xa;SET status = LOCKED,&#xa;    locked_by = :userId,&#xa;    locked_at = NOW(),&#xa;    lock_expires_at = NOW() + INTERVAL 10 minutes,&#xa;    version = version + 1&#xa;WHERE show_seat_id IN (:seatIds)&#xa;  AND status = AVAILABLE&#xa;  AND version = :expectedVersion" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;fontFamily=Courier New;fontSize=10;" parent="showseat-write-model" vertex="1">
          <mxGeometry y="40" width="440" height="310" as="geometry" />
        </mxCell>
        <mxCell id="payment-service-title" value="PAYMENT SERVICE - IDEMPOTENCY &amp; WEBHOOK HANDLING" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#a20025;strokeColor=#6F0000;fontSize=16;fontStyle=1;fontColor=#ffffff;" parent="1" vertex="1">
          <mxGeometry x="40" y="1230" width="920" height="40" as="geometry" />
        </mxCell>
        <mxCell id="payment-write-model" value="PaymentService" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#fff2cc;strokeColor=#d6b656;" parent="1" vertex="1">
          <mxGeometry x="40" y="1284" width="440" height="510" as="geometry" />
        </mxCell>
        <mxCell id="payment-write-attrs" value="- paymentId: UUID {AGGREGATE_ID}&#xa;- bookingId: UUID&#xa;- userId: UUID&#xa;- amount: Money&#xa;- status: PaymentStatus&#xa;- gateway: PaymentGateway&#xa;- idempotencyKey: String {UNIQUE}&#xa;- gatewayTransactionId: String&#xa;- retryCount: Integer&#xa;- version: Long {OPTIMISTIC_LOCK}&#xa;- uncommittedEvents: List&lt;DomainEvent&gt;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="payment-write-model" vertex="1">
          <mxGeometry y="40" width="440" height="170" as="geometry" />
        </mxCell>
        <mxCell id="payment-write-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="payment-write-model" vertex="1">
          <mxGeometry y="210" width="440" height="8" as="geometry" />
        </mxCell>
        <mxCell id="payment-write-methods" value="// Commands&#xa;+ handle(InitiatePaymentCommand): void&#xa;+ handle(CompletePaymentCommand): void&#xa;+ handle(FailPaymentCommand): void&#xa;+ handle(RefundPaymentCommand): void&#xa;&#xa;// Domain Logic&#xa;- initiatePayment(gateway: String): void&#xa;- completePayment(txnId: String): void&#xa;- failPayment(reason: String): void&#xa;- canRetry(): boolean&#xa;&#xa;// Events&#xa;- apply(PaymentInitiatedEvent)&#xa;- apply(PaymentSuccessEvent)&#xa;- apply(PaymentFailedEvent)&#xa;- apply(PaymentRefundedEvent)&#xa;&#xa;@Idempotent // Ensures duplicate commands are ignored" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="payment-write-model" vertex="1">
          <mxGeometry y="218" width="440" height="292" as="geometry" />
        </mxCell>
        <mxCell id="payment-command-handler" value="PaymentCommandHandler" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#e1d5e7;strokeColor=#9673a6;" parent="1" vertex="1">
          <mxGeometry x="520" y="1290" width="440" height="470" as="geometry" />
        </mxCell>
        <mxCell id="payment-cmd-deps" value="- paymentRepository: PaymentRepository&#xa;- eventStore: EventStore&#xa;- idempotencyService: IdempotencyService&#xa;- paymentGatewayFactory: PaymentGatewayFactory&#xa;- webhookValidator: WebhookValidator&#xa;- eventPublisher: DomainEventPublisher" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="payment-command-handler" vertex="1">
          <mxGeometry y="40" width="440" height="100" as="geometry" />
        </mxCell>
        <mxCell id="payment-cmd-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="payment-command-handler" vertex="1">
          <mxGeometry y="140" width="440" height="8" as="geometry" />
        </mxCell>
        <mxCell id="payment-cmd-methods" value="@CommandHandler&#xa;@Idempotent(key = &quot;#command.idempotencyKey&quot;)&#xa;+ handle(InitiatePaymentCommand): PaymentId {&#xa;  if (idempotencyService.isDuplicate(key)) {&#xa;    return getCachedResult(key);&#xa;  }&#xa;  PaymentAggregate payment = new PaymentAggregate();&#xa;  payment.handle(command);&#xa;  saveAndPublish(payment);&#xa;  idempotencyService.cache(key, payment.getId());&#xa;  return payment.getId();&#xa;}&#xa;&#xa;@WebhookHandler&#xa;+ handleWebhook(payload: WebhookPayload): void {&#xa;  if (!webhookValidator.verify(payload)) {&#xa;    throw InvalidWebhookException();&#xa;  }&#xa;  PaymentAggregate payment = load(payload.paymentId);&#xa;  payment.handle(new CompletePaymentCommand(...));&#xa;  saveAndPublish(payment);&#xa;}" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="payment-command-handler" vertex="1">
          <mxGeometry y="148" width="440" height="322" as="geometry" />
        </mxCell>
        <mxCell id="idempotency-service" value="&lt;&lt;Service&gt;&gt;&#xa;IdempotencyService" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#e1d5e7;strokeColor=#9673a6;" parent="1" vertex="1">
          <mxGeometry x="40" y="1802" width="460" height="490" as="geometry" />
        </mxCell>
        <mxCell id="idempotency-deps" value="- idempotencyRepository: IdempotencyRepository&#xa;- redisCache: RedisTemplate&#xa;- cacheTTL: Duration = 24 hours" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="idempotency-service" vertex="1">
          <mxGeometry y="40" width="460" height="50" as="geometry" />
        </mxCell>
        <mxCell id="idempotency-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="idempotency-service" vertex="1">
          <mxGeometry y="90" width="460" height="8" as="geometry" />
        </mxCell>
        <mxCell id="idempotency-methods" value="+ isDuplicate(key: String): boolean&#xa;+ getCachedResult(key: String): Object&#xa;+ cacheResult(key: String, result: Object): void&#xa;&#xa;@Transactional&#xa;public boolean processIdempotently(&#xa;    key: String, operation: Supplier&lt;T&gt;): T {&#xa;  &#xa;  // Check cache first (fast path)&#xa;  Optional&lt;T&gt; cached = redisCache.get(key);&#xa;  if (cached.isPresent()) {&#xa;    return cached.get();&#xa;  }&#xa;  &#xa;  // Check database (slower path)&#xa;  Optional&lt;IdempotencyRecord&gt; record = &#xa;    repository.findByKey(key);&#xa;  if (record.isPresent()) {&#xa;    return deserialize(record.get().getResult());&#xa;  }&#xa;  &#xa;  // Execute operation and store&#xa;  T result = operation.get();&#xa;  repository.save(new IdempotencyRecord(key, result));&#xa;  redisCache.set(key, result, cacheTTL);&#xa;  return result;&#xa;}" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="idempotency-service" vertex="1">
          <mxGeometry y="98" width="460" height="392" as="geometry" />
        </mxCell>
        <mxCell id="cqrs-read-title" value="CQRS - READ MODEL (QUERY SIDE) - MATERIALIZED VIEWS" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#008a00;strokeColor=#005700;fontSize=16;fontStyle=1;fontColor=#ffffff;" parent="1" vertex="1">
          <mxGeometry x="1000" y="2008" width="1000" height="40" as="geometry" />
        </mxCell>
        <mxCell id="booking-read-model" value="&lt;&lt;Read Model - Denormalized&gt;&gt;&#xa;BookingReadModel" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="1000" y="2068" width="460" height="520" as="geometry" />
        </mxCell>
        <mxCell id="booking-read-attrs" value="- bookingId: UUID {PK}&#xa;- userId: UUID {INDEXED}&#xa;- userName: String&#xa;- userEmail: String&#xa;- bookingReference: String {INDEXED}&#xa;- status: String {INDEXED}&#xa;&#xa;// Denormalized Show Info&#xa;- showId: UUID&#xa;- movieName: String&#xa;- moviePosterUrl: String&#xa;- theaterName: String&#xa;- screenName: String&#xa;- showTime: Instant&#xa;&#xa;// Denormalized Seat Info&#xa;- seats: List&lt;SeatInfo&gt; {JSON}&#xa;- totalSeats: Integer&#xa;&#xa;// Pricing Info&#xa;- totalAmount: BigDecimal&#xa;- finalAmount: BigDecimal&#xa;&#xa;// Payment Info&#xa;- paymentStatus: String&#xa;- paymentMethod: String&#xa;&#xa;- createdAt: Instant {INDEXED}&#xa;- updatedAt: Instant&#xa;&#xa;{INDEX: (userId, createdAt DESC)}&#xa;{INDEX: (status, createdAt DESC)}&#xa;{FULL_TEXT_INDEX: (movieName, theaterName)}" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="booking-read-model" vertex="1">
          <mxGeometry y="40" width="460" height="480" as="geometry" />
        </mxCell>
        <mxCell id="booking-query-service" value="&lt;&lt;Query Service&gt;&gt;&#xa;BookingQueryService" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#e1d5e7;strokeColor=#9673a6;" parent="1" vertex="1">
          <mxGeometry x="1500" y="2068" width="500" height="420" as="geometry" />
        </mxCell>
        <mxCell id="booking-query-deps" value="- bookingReadRepository: BookingReadRepository&#xa;- redisCache: RedisTemplate&#xa;- elasticsearchClient: ElasticsearchClient" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="booking-query-service" vertex="1">
          <mxGeometry y="40" width="500" height="60" as="geometry" />
        </mxCell>
        <mxCell id="booking-query-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="booking-query-service" vertex="1">
          <mxGeometry y="100" width="500" height="8" as="geometry" />
        </mxCell>
        <mxCell id="booking-query-methods" value="@QueryHandler&#xa;+ handle(GetBookingByIdQuery): BookingReadModel&#xa;+ handle(GetUserBookingsQuery): Page&lt;BookingReadModel&gt;&#xa;+ handle(SearchBookingsQuery): List&lt;BookingReadModel&gt;&#xa;&#xa;@Cacheable(key = &quot;booking:#bookingId&quot;, ttl = 5m)&#xa;public BookingReadModel getBookingById(UUID bookingId) {&#xa;  return bookingReadRepository.findById(bookingId)&#xa;    .orElseThrow(() -&gt; BookingNotFoundException());&#xa;}&#xa;&#xa;public Page&lt;BookingReadModel&gt; getUserBookings(&#xa;    UUID userId, Pageable pageable) {&#xa;  return bookingReadRepository&#xa;    .findByUserIdOrderByCreatedAtDesc(userId, pageable);&#xa;}&#xa;&#xa;public List&lt;BookingReadModel&gt; searchBookings(&#xa;    SearchCriteria criteria) {&#xa;  return elasticsearchClient.search(criteria);&#xa;}" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="booking-query-service" vertex="1">
          <mxGeometry y="108" width="500" height="312" as="geometry" />
        </mxCell>
        <mxCell id="event-projector" value="&lt;&lt;Event Projector&gt;&gt;&#xa;BookingEventProjector" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#e1d5e7;strokeColor=#9673a6;" parent="1" vertex="1">
          <mxGeometry x="1000" y="2606" width="520" height="540" as="geometry" />
        </mxCell>
        <mxCell id="projector-deps" value="- bookingReadRepository: BookingReadRepository&#xa;- showService: ShowService (for denormalization)&#xa;- userService: UserService (for denormalization)" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="event-projector" vertex="1">
          <mxGeometry y="40" width="520" height="60" as="geometry" />
        </mxCell>
        <mxCell id="projector-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="event-projector" vertex="1">
          <mxGeometry y="100" width="520" height="8" as="geometry" />
        </mxCell>
        <mxCell id="projector-methods" value="@EventHandler&#xa;+ on(BookingCreatedEvent event): void {&#xa;  // Fetch denormalized data&#xa;  ShowDetails show = showService.getShow(event.showId);&#xa;  UserDetails user = userService.getUser(event.userId);&#xa;  &#xa;  // Create read model&#xa;  BookingReadModel readModel = new BookingReadModel(&#xa;    event.bookingId,&#xa;    user.getName(),&#xa;    user.getEmail(),&#xa;    show.getMovieName(),&#xa;    show.getTheaterName(),&#xa;    // ... all denormalized fields&#xa;  );&#xa;  bookingReadRepository.save(readModel);&#xa;}&#xa;&#xa;@EventHandler&#xa;+ on(BookingConfirmedEvent event): void {&#xa;  bookingReadRepository.updateStatus(&#xa;    event.bookingId, &quot;CONFIRMED&quot;);&#xa;}&#xa;&#xa;@EventHandler&#xa;+ on(PaymentSuccessEvent event): void {&#xa;  bookingReadRepository.updatePaymentInfo(&#xa;    event.bookingId, event.paymentMethod, &quot;SUCCESS&quot;);&#xa;}" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="event-projector" vertex="1">
          <mxGeometry y="108" width="520" height="432" as="geometry" />
        </mxCell>
        <mxCell id="event-arch-title" value="EVENT-DRIVEN ARCHITECTURE - MESSAGE BUS &amp; EVENT SOURCING" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#f0a30a;strokeColor=#BD7000;fontSize=16;fontStyle=1;fontColor=#000000;" parent="1" vertex="1">
          <mxGeometry x="40" y="2306" width="920" height="40" as="geometry" />
        </mxCell>
        <mxCell id="domain-event-interface" value="&lt;&lt;Interface&gt;&gt;&#xa;DomainEvent" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#f8cecc;strokeColor=#b85450;" parent="1" vertex="1">
          <mxGeometry x="40" y="2358" width="400" height="280" as="geometry" />
        </mxCell>
        <mxCell id="domain-event-attrs" value="- eventId: UUID&#xa;- aggregateId: UUID&#xa;- aggregateType: String&#xa;- eventType: String&#xa;- timestamp: Instant&#xa;- version: Long&#xa;- correlationId: UUID&#xa;- causationId: UUID&#xa;- userId: UUID&#xa;- metadata: Map&lt;String, String&gt;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="domain-event-interface" vertex="1">
          <mxGeometry y="40" width="400" height="168" as="geometry" />
        </mxCell>
        <mxCell id="domain-event-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="domain-event-interface" vertex="1">
          <mxGeometry y="208" width="400" height="8" as="geometry" />
        </mxCell>
        <mxCell id="domain-event-methods" value="+ getEventId(): UUID&#xa;+ getAggregateId(): UUID&#xa;+ getTimestamp(): Instant&#xa;+ getEventType(): String" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="domain-event-interface" vertex="1">
          <mxGeometry y="216" width="400" height="64" as="geometry" />
        </mxCell>
        <mxCell id="event-bus" value="&lt;&lt;Message Bus&gt;&gt;&#xa;EventBus (Kafka)" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#ffe6cc;strokeColor=#d79b00;" parent="1" vertex="1">
          <mxGeometry x="490" y="2358" width="480" height="490" as="geometry" />
        </mxCell>
        <mxCell id="event-bus-attrs" value="- kafkaTemplate: KafkaTemplate&#xa;- topics:&#xa;  - booking-events&#xa;  - payment-events&#xa;  - seat-events&#xa;  - saga-commands&#xa;  - domain-events-dead-letter&#xa;&#xa;// Kafka Configuration&#xa;- partitions: 10 (per topic)&#xa;- replicationFactor: 3&#xa;- retention: 7 days&#xa;- compression: snappy" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="event-bus" vertex="1">
          <mxGeometry y="40" width="480" height="200" as="geometry" />
        </mxCell>
        <mxCell id="event-bus-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="event-bus" vertex="1">
          <mxGeometry y="240" width="480" height="8" as="geometry" />
        </mxCell>
        <mxCell id="event-bus-methods" value="+ publish(event: DomainEvent): CompletableFuture&lt;Void&gt;&#xa;+ publishBatch(events: List&lt;DomainEvent&gt;): void&#xa;+ subscribe(eventType, handler): void&#xa;&#xa;@Transactional&#xa;public void publishWithOutbox(event: DomainEvent) {&#xa;  // Transactional Outbox Pattern&#xa;  outboxRepository.save(new OutboxEvent(event));&#xa;  // Background job publishes to Kafka&#xa;}&#xa;&#xa;@KafkaListener(topics = &quot;booking-events&quot;)&#xa;public void handleBookingEvent(ConsumerRecord record) {&#xa;  DomainEvent event = deserialize(record.value());&#xa;  eventHandlerRegistry.handle(event);&#xa;}" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="event-bus" vertex="1">
          <mxGeometry y="248" width="480" height="242" as="geometry" />
        </mxCell>
        <mxCell id="outbox-pattern" value="&lt;&lt;Pattern&gt;&gt;&#xa;TransactionalOutbox" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#fff2cc;strokeColor=#d6b656;" parent="1" vertex="1">
          <mxGeometry x="40" y="2660" width="410" height="410" as="geometry" />
        </mxCell>
        <mxCell id="outbox-attrs" value="- outboxId: UUID {PK}&#xa;- aggregateId: UUID {INDEXED}&#xa;- eventType: String&#xa;- eventPayload: JSONB&#xa;- published: Boolean {DEFAULT: false, INDEXED}&#xa;- publishedAt: Instant&#xa;- createdAt: Instant {INDEXED}&#xa;- retryCount: Integer&#xa;- error: String&#xa;&#xa;{INDEX: (published, createdAt) WHERE published = false}&#xa;&#xa;// Ensures exactly-once event delivery&#xa;// Events are published atomically with DB transaction" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="outbox-pattern" vertex="1">
          <mxGeometry y="40" width="410" height="220" as="geometry" />
        </mxCell>
        <mxCell id="outbox-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="outbox-pattern" vertex="1">
          <mxGeometry y="260" width="410" height="8" as="geometry" />
        </mxCell>
        <mxCell id="outbox-methods" value="@Scheduled(fixedDelay = 1000)&#xa;public void publishPendingEvents() {&#xa;  List&lt;OutboxEvent&gt; pending = outboxRepo&#xa;    .findTop100ByPublishedFalseOrderByCreatedAt();&#xa;  pending.forEach(event -&gt; {&#xa;    kafkaTemplate.send(event.getTopic(), event.getPayload());&#xa;    outboxRepo.markAsPublished(event.getId());&#xa;  });&#xa;}" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="outbox-pattern" vertex="1">
          <mxGeometry y="268" width="410" height="142" as="geometry" />
        </mxCell>
        <mxCell id="db-schemas-title" value="DATABASE SCHEMAS - MICROSERVICES (SEPARATE DATABASES PER SERVICE)" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#6a00ff;strokeColor=#3700CC;fontSize=16;fontStyle=1;fontColor=#ffffff;" parent="1" vertex="1">
          <mxGeometry x="2100" y="120" width="1400" height="40" as="geometry" />
        </mxCell>
        <mxCell id="booking-db-schema" value="BOOKING SERVICE DATABASE" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="2100" y="180" width="440" height="650" as="geometry" />
        </mxCell>
        <mxCell id="booking-db-tables" value="TABLE: bookings&#xa;PK  booking_id            UUID&#xa;    user_id               UUID NOT NULL&#xa;    show_id               UUID NOT NULL&#xa;    booking_reference     VARCHAR(20) UNIQUE&#xa;    status                VARCHAR(20) NOT NULL&#xa;    total_amount          DECIMAL(10,2)&#xa;    final_amount          DECIMAL(10,2)&#xa;    payment_id            UUID&#xa;    number_of_seats       INTEGER&#xa;    created_at            TIMESTAMP NOT NULL&#xa;    expires_at            TIMESTAMP NOT NULL&#xa;    version               BIGINT DEFAULT 0&#xa;    saga_id               UUID&#xa;    saga_step             VARCHAR(30)&#xa;&#xa;TABLE: booking_seats&#xa;PK  booking_seat_id       UUID&#xa;FK  booking_id            UUID NOT NULL&#xa;    show_seat_id          UUID NOT NULL&#xa;    seat_number           VARCHAR(10)&#xa;    row_label             VARCHAR(5)&#xa;    seat_type             VARCHAR(20)&#xa;    final_price           DECIMAL(10,2)&#xa;    version               BIGINT DEFAULT 0&#xa;&#xa;TABLE: event_store (Event Sourcing)&#xa;PK  event_id              UUID&#xa;    aggregate_id          UUID NOT NULL&#xa;    aggregate_type        VARCHAR(50)&#xa;    event_type            VARCHAR(100)&#xa;    event_data            JSONB NOT NULL&#xa;    version               BIGINT NOT NULL&#xa;    timestamp             TIMESTAMP NOT NULL&#xa;    correlation_id        UUID&#xa;    UNIQUE (aggregate_id, version)&#xa;&#xa;TABLE: saga_state&#xa;PK  saga_id               UUID&#xa;    saga_type             VARCHAR(50)&#xa;    booking_id            UUID&#xa;    current_step          VARCHAR(30)&#xa;    status                VARCHAR(20)&#xa;    compensation_data     JSONB&#xa;    version               BIGINT DEFAULT 0&#xa;&#xa;INDEXES:&#xa;  CREATE INDEX idx_bookings_user_created&#xa;    ON bookings(user_id, created_at DESC);&#xa;  CREATE INDEX idx_bookings_status_expires&#xa;    ON bookings(status, expires_at);&#xa;  CREATE INDEX idx_event_store_aggregate&#xa;    ON event_store(aggregate_id, version);&#xa;  CREATE INDEX idx_saga_booking&#xa;    ON saga_state(booking_id);" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;fontFamily=Courier New;fontSize=9;" parent="booking-db-schema" vertex="1">
          <mxGeometry y="30" width="440" height="620" as="geometry" />
        </mxCell>
        <mxCell id="seat-db-schema" value="SEAT SERVICE DATABASE" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#fff2cc;strokeColor=#d6b656;" parent="1" vertex="1">
          <mxGeometry x="2580" y="180" width="440" height="530" as="geometry" />
        </mxCell>
        <mxCell id="seat-db-tables" value="TABLE: show_seats (Write Model)&#xa;PK  show_seat_id          UUID&#xa;FK  show_id               UUID NOT NULL&#xa;FK  seat_id               UUID NOT NULL&#xa;    seat_number           VARCHAR(10) NOT NULL&#xa;    row_label             VARCHAR(5) NOT NULL&#xa;    seat_type             VARCHAR(20) NOT NULL&#xa;    base_price            DECIMAL(10,2) NOT NULL&#xa;    status                VARCHAR(20) NOT NULL&#xa;                          DEFAULT AVAILABLE&#xa;    locked_by             UUID&#xa;    locked_at             TIMESTAMP&#xa;    lock_expires_at       TIMESTAMP&#xa;    booking_id            UUID&#xa;    version               BIGINT NOT NULL DEFAULT 0&#xa;    last_modified_at      TIMESTAMP DEFAULT NOW()&#xa;    UNIQUE (show_id, seat_id)&#xa;&#xa;TABLE: event_store&#xa;PK  event_id              UUID&#xa;    aggregate_id          UUID NOT NULL&#xa;    event_type            VARCHAR(100)&#xa;    event_data            JSONB NOT NULL&#xa;    version               BIGINT NOT NULL&#xa;    timestamp             TIMESTAMP NOT NULL&#xa;&#xa;CONSTRAINTS:&#xa;  CHECK (status IN (AVAILABLE,LOCKED,BOOKED))&#xa;  CHECK (locked_at IS NULL OR &#xa;         lock_expires_at &gt; locked_at)&#xa;&#xa;INDEXES:&#xa;  CREATE INDEX idx_show_seats_show_status&#xa;    ON show_seats(show_id, status);&#xa;  CREATE INDEX idx_show_seats_lock_expiry&#xa;    ON show_seats(lock_expires_at)&#xa;    WHERE status = LOCKED;&#xa;  CREATE INDEX idx_show_seats_version&#xa;    ON show_seats(show_seat_id, version);&#xa;&#xa;PARTITIONING:&#xa;  PARTITION BY RANGE (show_id);&#xa;  -- Improves query performance for show-specific queries" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;fontFamily=Courier New;fontSize=9;" parent="seat-db-schema" vertex="1">
          <mxGeometry y="30" width="440" height="500" as="geometry" />
        </mxCell>
        <mxCell id="payment-db-schema" value="PAYMENT SERVICE DATABASE" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="3060" y="180" width="440" height="580" as="geometry" />
        </mxCell>
        <mxCell id="payment-db-tables" value="TABLE: payments&#xa;PK  payment_id            UUID&#xa;    booking_id            UUID UNIQUE NOT NULL&#xa;    user_id               UUID NOT NULL&#xa;    amount                DECIMAL(10,2) NOT NULL&#xa;    currency              VARCHAR(3) DEFAULT INR&#xa;    payment_method        VARCHAR(30) NOT NULL&#xa;    status                VARCHAR(20) NOT NULL&#xa;    gateway               VARCHAR(30) NOT NULL&#xa;    gateway_txn_id        VARCHAR(100) UNIQUE&#xa;    gateway_order_id      VARCHAR(100) UNIQUE&#xa;    idempotency_key       VARCHAR(100) UNIQUE NOT NULL&#xa;    retry_count           INTEGER DEFAULT 0&#xa;    initiated_at          TIMESTAMP NOT NULL&#xa;    completed_at          TIMESTAMP&#xa;    version               BIGINT DEFAULT 0&#xa;&#xa;TABLE: payment_transactions (Audit)&#xa;PK  transaction_id        UUID&#xa;FK  payment_id            UUID NOT NULL&#xa;    transaction_type      VARCHAR(30)&#xa;    status                VARCHAR(20)&#xa;    amount                DECIMAL(10,2)&#xa;    gateway_response      JSONB&#xa;    error_message         TEXT&#xa;    created_at            TIMESTAMP NOT NULL&#xa;&#xa;TABLE: idempotency_records&#xa;PK  idempotency_key       VARCHAR(100)&#xa;    result_data           JSONB&#xa;    created_at            TIMESTAMP NOT NULL&#xa;    expires_at            TIMESTAMP NOT NULL&#xa;&#xa;TABLE: event_store&#xa;PK  event_id              UUID&#xa;    aggregate_id          UUID NOT NULL&#xa;    event_type            VARCHAR(100)&#xa;    event_data            JSONB NOT NULL&#xa;    version               BIGINT NOT NULL&#xa;    timestamp             TIMESTAMP NOT NULL&#xa;&#xa;INDEXES:&#xa;  CREATE UNIQUE INDEX idx_payments_booking&#xa;    ON payments(booking_id);&#xa;  CREATE UNIQUE INDEX idx_payments_idempotency&#xa;    ON payments(idempotency_key);&#xa;  CREATE INDEX idx_payment_txns_payment&#xa;    ON payment_transactions(payment_id, created_at DESC);" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;fontFamily=Courier New;fontSize=9;" parent="payment-db-schema" vertex="1">
          <mxGeometry y="30" width="440" height="550" as="geometry" />
        </mxCell>
        <mxCell id="read-model-db-schema" value="READ MODEL DATABASE (CQRS)" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="2100" y="840" width="460" height="580" as="geometry" />
        </mxCell>
        <mxCell id="read-model-tables" value="TABLE: booking_read_model (Denormalized)&#xa;PK  booking_id            UUID&#xa;    user_id               UUID NOT NULL&#xa;    user_name             VARCHAR(100)&#xa;    user_email            VARCHAR(100)&#xa;    booking_reference     VARCHAR(20)&#xa;    status                VARCHAR(20)&#xa;&#xa;    -- Denormalized Show Info&#xa;    show_id               UUID&#xa;    movie_name            VARCHAR(200)&#xa;    movie_poster_url      TEXT&#xa;    theater_name          VARCHAR(200)&#xa;    screen_name           VARCHAR(50)&#xa;    show_time             TIMESTAMP&#xa;    show_date             DATE&#xa;&#xa;    -- Denormalized Seat Info&#xa;    seats_json            JSONB&#xa;    seat_numbers          TEXT[] -- Array for quick display&#xa;    total_seats           INTEGER&#xa;&#xa;    -- Pricing Info&#xa;    total_amount          DECIMAL(10,2)&#xa;    final_amount          DECIMAL(10,2)&#xa;&#xa;    -- Payment Info&#xa;    payment_status        VARCHAR(20)&#xa;    payment_method        VARCHAR(30)&#xa;&#xa;    created_at            TIMESTAMP NOT NULL&#xa;    updated_at            TIMESTAMP&#xa;&#xa;TABLE: user_booking_summary (Aggregated)&#xa;PK  user_id               UUID&#xa;    total_bookings        INTEGER&#xa;    confirmed_bookings    INTEGER&#xa;    cancelled_bookings    INTEGER&#xa;    total_spent           DECIMAL(12,2)&#xa;    last_booking_date     TIMESTAMP&#xa;    favorite_theater      VARCHAR(200)&#xa;    updated_at            TIMESTAMP&#xa;&#xa;INDEXES:&#xa;  CREATE INDEX idx_booking_read_user_created&#xa;    ON booking_read_model(user_id, created_at DESC);&#xa;  CREATE INDEX idx_booking_read_status&#xa;    ON booking_read_model(status, created_at DESC);&#xa;  CREATE INDEX idx_booking_read_show&#xa;    ON booking_read_model(show_id);&#xa;  CREATE INDEX idx_booking_read_reference&#xa;    ON booking_read_model(booking_reference);&#xa;  CREATE INDEX idx_booking_read_show_date&#xa;    ON booking_read_model(show_date);&#xa;&#xa;FULL TEXT SEARCH:&#xa;  CREATE INDEX idx_booking_read_search&#xa;    ON booking_read_model&#xa;    USING gin(to_tsvector(english,&#xa;      movie_name ||   || theater_name));" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;fontFamily=Courier New;fontSize=9;" parent="read-model-db-schema" vertex="1">
          <mxGeometry y="30" width="460" height="550" as="geometry" />
        </mxCell>
        <mxCell id="outbox-db-schema" value="TRANSACTIONAL OUTBOX (All Services)" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#ffe6cc;strokeColor=#d79b00;" parent="1" vertex="1">
          <mxGeometry x="2600" y="840" width="460" height="380" as="geometry" />
        </mxCell>
        <mxCell id="outbox-db-tables" value="TABLE: outbox_events&#xa;PK  outbox_id             UUID&#xa;    aggregate_id          UUID NOT NULL&#xa;    aggregate_type        VARCHAR(50)&#xa;    event_type            VARCHAR(100) NOT NULL&#xa;    event_payload         JSONB NOT NULL&#xa;    topic                 VARCHAR(100) NOT NULL&#xa;    partition_key         VARCHAR(100)&#xa;    published             BOOLEAN DEFAULT false&#xa;    published_at          TIMESTAMP&#xa;    created_at            TIMESTAMP NOT NULL&#xa;    retry_count           INTEGER DEFAULT 0&#xa;    error_message         TEXT&#xa;&#xa;INDEXES:&#xa;  CREATE INDEX idx_outbox_unpublished&#xa;    ON outbox_events(published, created_at)&#xa;    WHERE published = false;&#xa;  CREATE INDEX idx_outbox_aggregate&#xa;    ON outbox_events(aggregate_id);&#xa;&#xa;PARTITIONING:&#xa;  PARTITION BY RANGE (created_at);&#xa;  -- Daily partitions for efficient cleanup&#xa;&#xa;CLEANUP POLICY:&#xa;  -- Delete published events older than 7 days&#xa;  DELETE FROM outbox_events&#xa;  WHERE published = true&#xa;    AND published_at ( NOW() - INTERVAL 7 days;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;fontFamily=Courier New;fontSize=9;" parent="outbox-db-schema" vertex="1">
          <mxGeometry y="30" width="460" height="350" as="geometry" />
        </mxCell>
        <mxCell id="enums-micro-title" value="ENUMS &amp; VALUE OBJECTS - MICROSERVICES" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#60a917;strokeColor=#2D7600;fontSize=16;fontStyle=1;fontColor=#ffffff;" parent="1" vertex="1">
          <mxGeometry x="2100" y="1460" width="1400" height="40" as="geometry" />
        </mxCell>
        <mxCell id="booking-status-enum" value="&lt;&lt;Enum&gt;&gt;&#xa;BookingStatus" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="2100" y="1520" width="300" height="240" as="geometry" />
        </mxCell>
        <mxCell id="booking-status-values" value="INITIATED&#xa;SEATS_LOCKED&#xa;PAYMENT_PENDING&#xa;PAYMENT_IN_PROGRESS&#xa;CONFIRMED&#xa;CANCELLED&#xa;EXPIRED&#xa;FAILED&#xa;&#xa;// State Transitions:&#xa;INITIATED → SEATS_LOCKED → &#xa;PAYMENT_PENDING → CONFIRMED" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="booking-status-enum" vertex="1">
          <mxGeometry y="40" width="300" height="200" as="geometry" />
        </mxCell>
        <mxCell id="saga-step-enum" value="&lt;&lt;Enum&gt;&gt;&#xa;SagaStep" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="2440" y="1520" width="280" height="240" as="geometry" />
        </mxCell>
        <mxCell id="saga-step-values" value="CREATE_BOOKING&#xa;LOCK_SEATS&#xa;INITIATE_PAYMENT&#xa;CONFIRM_BOOKING&#xa;SEND_NOTIFICATION&#xa;COMPLETED&#xa;&#xa;// Compensation Steps:&#xa;COMPENSATE_SEATS&#xa;COMPENSATE_BOOKING&#xa;COMPENSATE_PAYMENT" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="saga-step-enum" vertex="1">
          <mxGeometry y="40" width="280" height="200" as="geometry" />
        </mxCell>
        <mxCell id="saga-status-enum" value="&lt;&lt;Enum&gt;&gt;&#xa;SagaStatus" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="2760" y="1520" width="280" height="200" as="geometry" />
        </mxCell>
        <mxCell id="saga-status-values" value="STARTED&#xa;IN_PROGRESS&#xa;COMPENSATING&#xa;COMPLETED&#xa;FAILED&#xa;COMPENSATED" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="saga-status-enum" vertex="1">
          <mxGeometry y="40" width="280" height="160" as="geometry" />
        </mxCell>
        <mxCell id="seat-status-enum" value="&lt;&lt;Enum&gt;&gt;&#xa;SeatStatus" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="3080" y="1520" width="280" height="220" as="geometry" />
        </mxCell>
        <mxCell id="seat-status-values" value="AVAILABLE&#xa;LOCKED&#xa;BOOKED&#xa;BLOCKED&#xa;MAINTENANCE&#xa;&#xa;// Transitions:&#xa;AVAILABLE ↔ LOCKED → BOOKED&#xa;LOCKED → AVAILABLE (timeout)" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="seat-status-enum" vertex="1">
          <mxGeometry y="40" width="280" height="180" as="geometry" />
        </mxCell>
        <mxCell id="payment-status-enum" value="&lt;&lt;Enum&gt;&gt;&#xa;PaymentStatus" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="2100" y="1800" width="280" height="220" as="geometry" />
        </mxCell>
        <mxCell id="payment-status-values" value="INITIATED&#xa;PENDING&#xa;PROCESSING&#xa;AUTHORIZED&#xa;CAPTURED&#xa;SUCCESS&#xa;FAILED&#xa;REFUNDED&#xa;PARTIALLY_REFUNDED" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="payment-status-enum" vertex="1">
          <mxGeometry y="40" width="280" height="180" as="geometry" />
        </mxCell>
        <mxCell id="saga-flow-title" value="BOOKING SAGA - CHOREOGRAPHY FLOW DIAGRAM" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#d80073;strokeColor=#A50040;fontSize=16;fontStyle=1;fontColor=#ffffff;" parent="1" vertex="1">
          <mxGeometry x="40" y="3100" width="920" height="40" as="geometry" />
        </mxCell>
        <mxCell id="saga-flow-desc" value="&lt;&lt;Saga Flow&gt;&gt;&#xa;Booking Saga - Forward &amp; Compensation Flow" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#ffe6cc;strokeColor=#d79b00;" parent="1" vertex="1">
          <mxGeometry x="40" y="3155" width="920" height="1380" as="geometry" />
        </mxCell>
        <mxCell id="saga-flow-content" value="FORWARD FLOW (Happy Path):&#xa;══════════════════════════════════════════════════════════════════════════════════════════════&#xa;&#xa;1. USER → BookingService.createBooking()&#xa;   ↓&#xa;   CREATE BookingAggregate (status: INITIATED)&#xa;   PUBLISH BookingCreatedEvent → Kafka&#xa;   ↓&#xa;2. SagaOrchestrator receives BookingCreatedEvent&#xa;   ↓&#xa;   UPDATE SagaState (step: LOCK_SEATS, status: IN_PROGRESS)&#xa;   SEND LockSeatsCommand → SeatService&#xa;   ↓&#xa;3. SeatService.lockSeats()&#xa;   ↓&#xa;   ACQUIRE Redis locks (distributed lock)&#xa;   UPDATE show_seats (status: LOCKED, optimistic lock)&#xa;   PUBLISH SeatsLockedEvent → Kafka&#xa;   ↓&#xa;4. SagaOrchestrator receives SeatsLockedEvent&#xa;   ↓&#xa;   UPDATE SagaState (step: INITIATE_PAYMENT)&#xa;   SEND InitiatePaymentCommand → PaymentService&#xa;   ↓&#xa;5. PaymentService.initiatePayment()&#xa;   ↓&#xa;   CREATE PaymentAggregate (status: INITIATED)&#xa;   CALL PaymentGateway.createOrder()&#xa;   RETURN payment URL to user&#xa;   ↓&#xa;6. USER completes payment on gateway&#xa;   ↓&#xa;   PaymentGateway → WebhookController.handleWebhook()&#xa;   VERIFY webhook signature&#xa;   UPDATE PaymentAggregate (status: SUCCESS)&#xa;   PUBLISH PaymentSuccessEvent → Kafka&#xa;   ↓&#xa;7. SagaOrchestrator receives PaymentSuccessEvent&#xa;   ↓&#xa;   UPDATE SagaState (step: CONFIRM_BOOKING)&#xa;   SEND ConfirmBookingCommand → BookingService&#xa;   ↓&#xa;8. BookingService.confirmBooking()&#xa;   ↓&#xa;   UPDATE BookingAggregate (status: CONFIRMED)&#xa;   UPDATE show_seats (status: BOOKED)&#xa;   PUBLISH BookingConfirmedEvent → Kafka&#xa;   ↓&#xa;9. SagaOrchestrator receives BookingConfirmedEvent&#xa;   ↓&#xa;   UPDATE SagaState (step: SEND_NOTIFICATION, status: COMPLETED)&#xa;   SEND SendNotificationCommand → NotificationService&#xa;   ↓&#xa;10. NotificationService sends confirmation email/SMS&#xa;&#xa;&#xa;COMPENSATION FLOW (Failure Scenarios):&#xa;══════════════════════════════════════════════════════════════════════════════════════════════&#xa;&#xa;SCENARIO A: Payment Fails&#xa;───────────────────────────&#xa;1. PaymentService.initiatePayment() FAILS&#xa;   PUBLISH PaymentFailedEvent → Kafka&#xa;   ↓&#xa;2. SagaOrchestrator receives PaymentFailedEvent&#xa;   ↓&#xa;   UPDATE SagaState (status: COMPENSATING)&#xa;   SEND ReleaseSeatsCommand → SeatService [COMPENSATION]&#xa;   ↓&#xa;3. SeatService.releaseSeats()&#xa;   ↓&#xa;   UPDATE show_seats (status: AVAILABLE)&#xa;   RELEASE Redis locks&#xa;   PUBLISH SeatsReleasedEvent → Kafka&#xa;   ↓&#xa;4. SagaOrchestrator receives SeatsReleasedEvent&#xa;   ↓&#xa;   SEND CancelBookingCommand → BookingService [COMPENSATION]&#xa;   ↓&#xa;5. BookingService.cancelBooking()&#xa;   ↓&#xa;   UPDATE BookingAggregate (status: CANCELLED)&#xa;   PUBLISH BookingCancelledEvent → Kafka&#xa;   ↓&#xa;6. SagaOrchestrator receives BookingCancelledEvent&#xa;   ↓&#xa;   UPDATE SagaState (status: COMPENSATED)&#xa;   SEND SendCancellationNotification → NotificationService&#xa;&#xa;&#xa;SCENARIO B: Seat Lock Fails (Race Condition)&#xa;───────────────────────────────────────────────&#xa;1. SeatService.lockSeats() FAILS (seats already locked)&#xa;   PUBLISH SeatLockFailedEvent → Kafka&#xa;   ↓&#xa;2. SagaOrchestrator receives SeatLockFailedEvent&#xa;   ↓&#xa;   UPDATE SagaState (status: COMPENSATING)&#xa;   SEND CancelBookingCommand → BookingService [COMPENSATION]&#xa;   ↓&#xa;3. BookingService.cancelBooking()&#xa;   ↓&#xa;   UPDATE BookingAggregate (status: FAILED)&#xa;   PUBLISH BookingFailedEvent → Kafka&#xa;   ↓&#xa;4. SagaOrchestrator receives BookingFailedEvent&#xa;   ↓&#xa;   UPDATE SagaState (status: FAILED)&#xa; PATTERNS:&#xa;═══════════════════════════════════════════════════════════════════════════════════════════════&#xa;&#xa;✓ Two-Phase Commit Alternative: Saga handles distributed transaction&#xa;✓ Event Sourcing: All state changes recorded as events&#xa;✓ CQRS: Separate write and read models&#xa;✓ Transactional Outbox: Ensures reliable event publishing&#xa;✓ Idempotency: Duplicate commands/events handled safely&#xa;✓ Optimistic Locking: Prevents concurrent modification conflicts&#xa;✓ Distributed Locking: Redis for seat reservation&#xa;✓ Circuit Breaker: Prevents cascade failures&#xa;✓ Retry with Backoff: Handles transient failures" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;fontFamily=Courier New;fontSize=9;" parent="saga-flow-desc" vertex="1">
          <mxGeometry y="40" width="920" height="1340" as="geometry" />
        </mxCell>
        <mxCell id="api-gateway-title" value="API GATEWAY &amp; SERVICE MESH ARCHITECTURE" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#0050ef;strokeColor=#001DBC;fontSize=16;fontStyle=1;fontColor=#ffffff;" parent="1" vertex="1">
          <mxGeometry x="2100" y="2037" width="1400" height="40" as="geometry" />
        </mxCell>
        <mxCell id="api-gateway" value="&lt;&lt;API Gateway&gt;&gt;&#xa;Gateway" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="2100" y="2080" width="500" height="550" as="geometry" />
        </mxCell>
        <mxCell id="api-gateway-attrs" value="// Responsibilities:&#xa;- Authentication &amp; Authorization (JWT)&#xa;- Rate Limiting&#xa;- Request Routing&#xa;- Load Balancing&#xa;- API Composition (BFF Pattern)&#xa;- Response Caching&#xa;- Circuit Breaking&#xa;&#xa;// Routes:&#xa;/api/v1/bookings/* → Booking Service&#xa;/api/v1/payments/* → Payment Service&#xa;/api/v1/shows/* → Show Service&#xa;/api/v1/seats/* → Seat Service" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="api-gateway" vertex="1">
          <mxGeometry y="40" width="500" height="210" as="geometry" />
        </mxCell>
        <mxCell id="api-gateway-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="api-gateway" vertex="1">
          <mxGeometry y="250" width="500" height="8" as="geometry" />
        </mxCell>
        <mxCell id="api-gateway-methods" value="@RateLimiter(limit = 100, per = &quot;1m&quot;)&#xa;@Authenticate&#xa;public RouteSpec bookingRoutes() {&#xa;  return route()&#xa;    .path(&quot;/api/v1/bookings&quot;)&#xa;    .filter(authFilter())&#xa;    .filter(rateLimitFilter())&#xa;    .uri(&quot;lb://booking-service&quot;)&#xa;    .build();&#xa;}&#xa;&#xa;@CircuitBreaker(fallbackMethod = &quot;fallbackBooking&quot;)&#xa;public Mono&lt;Response&gt; forwardRequest(Request req) {&#xa;  return webClient.post()&#xa;    .uri(targetService)&#xa;    .bodyValue(req)&#xa;    .retrieve()&#xa;    .bodyToMono(Response.class)&#xa;    .timeout(Duration.ofSeconds(5));&#xa;}" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="api-gateway" vertex="1">
          <mxGeometry y="258" width="500" height="292" as="geometry" />
        </mxCell>
        <mxCell id="service-discovery" value="&lt;&lt;Service Discovery&gt;&gt;&#xa;EurekaServer" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#e1d5e7;strokeColor=#9673a6;" parent="1" vertex="1">
          <mxGeometry x="2640" y="2120" width="440" height="360" as="geometry" />
        </mxCell>
        <mxCell id="service-discovery-attrs" value="// Registered Services:&#xa;- booking-service (3 instances)&#xa;- payment-service (3 instances)&#xa;- seat-service (5 instances)&#xa;- notification-service (2 instances)&#xa;- show-service (3 instances)&#xa;&#xa;// Service Registration:&#xa;Service Instance → Register with Eureka&#xa;  {&#xa;    name: &quot;booking-service&quot;,&#xa;    host: &quot;10.0.1.42&quot;,&#xa;    port: 8080,&#xa;    healthCheckUrl: &quot;/actuator/health&quot;,&#xa;    metadata: { zone: &quot;us-east-1a&quot; }&#xa;  }" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="service-discovery" vertex="1">
          <mxGeometry y="40" width="440" height="240" as="geometry" />
        </mxCell>
        <mxCell id="service-discovery-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="service-discovery" vertex="1">
          <mxGeometry y="280" width="440" height="8" as="geometry" />
        </mxCell>
        <mxCell id="service-discovery-methods" value="+ register(serviceInstance): void&#xa;+ deregister(serviceId): void&#xa;+ getServiceInstances(serviceId): List&lt;Instance&gt;&#xa;+ healthCheck(): void" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="service-discovery" vertex="1">
          <mxGeometry y="288" width="440" height="72" as="geometry" />
        </mxCell>
        <mxCell id="config-server" value="&lt;&lt;Config Server&gt;&gt;&#xa;Spring Cloud Config" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#e1d5e7;strokeColor=#9673a6;" parent="1" vertex="1">
          <mxGeometry x="3120" y="2120" width="380" height="310" as="geometry" />
        </mxCell>
        <mxCell id="config-server-attrs" value="// Centralized Configuration:&#xa;- Database URLs&#xa;- Kafka Bootstrap Servers&#xa;- Redis Cluster Config&#xa;- Payment Gateway Credentials&#xa;- Feature Flags&#xa;- Timeouts &amp; Retry Policies&#xa;&#xa;// Git Repository:&#xa;config-repo/&#xa;  ├── booking-service.yml&#xa;  ├── payment-service.yml&#xa;  ├── seat-service.yml&#xa;  └── application.yml (common)" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="config-server" vertex="1">
          <mxGeometry y="40" width="380" height="200" as="geometry" />
        </mxCell>
        <mxCell id="config-server-line" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="config-server" vertex="1">
          <mxGeometry y="240" width="380" height="8" as="geometry" />
        </mxCell>
        <mxCell id="config-server-methods" value="+ getConfiguration(service, profile): Config&#xa;+ refreshConfiguration(service): void" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="config-server" vertex="1">
          <mxGeometry y="248" width="380" height="62" as="geometry" />
        </mxCell>
        <mxCell id="caching-title" value="DISTRIBUTED CACHING STRATEGY - REDIS CLUSTER" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#a20025;strokeColor=#6F0000;fontSize=16;fontStyle=1;fontColor=#ffffff;" parent="1" vertex="1">
          <mxGeometry x="2100" y="2640" width="1400" height="40" as="geometry" />
        </mxCell>
        <mxCell id="redis-cache-strategy" value="&lt;&lt;Caching Strategy&gt;&gt;&#xa;Redis Cluster Configuration" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#f8cecc;strokeColor=#b85450;" parent="1" vertex="1">
          <mxGeometry x="2100" y="2700" width="600" height="750" as="geometry" />
        </mxCell>
        <mxCell id="redis-cache-content" value="// Redis Cluster Setup:&#xa;- 6 nodes (3 masters + 3 replicas)&#xa;- Hash slots: 16384 (distributed across masters)&#xa;- Replication: Async&#xa;- Persistence: AOF + RDB&#xa;&#xa;// Cache Keys &amp; TTL:&#xa;═════════════════════════════════════════════════════════&#xa;&#xa;1. Seat Locks (CRITICAL)&#xa;   Key: LOCK:show:{showId}:seat:{seatId}&#xa;   TTL: 600 seconds (10 minutes)&#xa;   Type: String (lock token)&#xa;   Purpose: Distributed seat locking&#xa;&#xa;2. Show Seat Availability (HOT DATA)&#xa;   Key: SEATS:show:{showId}:available&#xa;   TTL: 60 seconds&#xa;   Type: Sorted Set (seatId by price)&#xa;   Purpose: Fast seat availability lookup&#xa;&#xa;3. User Session&#xa;   Key: SESSION:user:{userId}&#xa;   TTL: 3600 seconds (1 hour)&#xa;   Type: Hash&#xa;   Purpose: User authentication state&#xa;&#xa;4. Booking Read Model (QUERY CACHE)&#xa;   Key: BOOKING:id:{bookingId}&#xa;   TTL: 300 seconds (5 minutes)&#xa;   Type: Hash&#xa;   Purpose: Cache booking details&#xa;&#xa;5. Rate Limiting&#xa;   Key: RATELIMIT:user:{userId}:{endpoint}&#xa;   TTL: 60 seconds&#xa;   Type: String (counter)&#xa;   Purpose: API rate limiting&#xa;&#xa;6. Idempotency Cache&#xa;   Key: IDEMPOTENCY:{idempotencyKey}&#xa;   TTL: 86400 seconds (24 hours)&#xa;   Type: Hash&#xa;   Purpose: Prevent duplicate operations&#xa;&#xa;7. Payment Status (TRANSIENT)&#xa;   Key: PAYMENT:status:{paymentId}&#xa;   TTL: 1800 seconds (30 minutes)&#xa;   Type: Hash&#xa;   Purpose: Quick payment status lookup&#xa;&#xa;// Cache Invalidation Strategy:&#xa;═════════════════════════════════════════════════════════&#xa;&#xa;- Write-Through: Update cache on DB write&#xa;- Cache-Aside: Load from DB if cache miss&#xa;- Event-Driven: Invalidate on domain events&#xa;- TTL-Based: Auto-expire for time-sensitive data" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;fontFamily=Courier New;fontSize=9;" parent="redis-cache-strategy" vertex="1">
          <mxGeometry y="40" width="600" height="710" as="geometry" />
        </mxCell>
        <mxCell id="cache-patterns" value="&lt;&lt;Cache Patterns&gt;&gt;&#xa;Implementation Examples" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#e1d5e7;strokeColor=#9673a6;" parent="1" vertex="1">
          <mxGeometry x="2740" y="2700" width="760" height="750" as="geometry" />
        </mxCell>
        <mxCell id="cache-patterns-content" value="@Cacheable(key = &quot;BOOKING:id: + #bookingId&quot;, ttl = 300)&#xa;public BookingReadModel getBooking(UUID bookingId) {&#xa;  return bookingReadRepository.findById(bookingId)&#xa;    .orElseThrow(BookingNotFoundException::new);&#xa;}&#xa;&#xa;@CacheEvict(key = &quot;BOOKING:id: + #event.bookingId&quot;)&#xa;@EventHandler&#xa;public void on(BookingConfirmedEvent event) {&#xa;  // Cache automatically invalidated&#xa;}&#xa;&#xa;// Cache-Aside Pattern with Lua Script&#xa;public Optional&lt;ShowSeatAvailability&gt; getAvailableSeats(UUID showId) {&#xa;  String key = &quot;SEATS:show:&quot; + showId + &quot;:available&quot;;&#xa;  &#xa;  // Try cache first&#xa;  Set&lt;String&gt; cachedSeats = redisTemplate&#xa;    .opsForZSet()&#xa;    .range(key, 0, -1);&#xa;  &#xa;  if (cachedSeats != null &amp;&amp; !cachedSeats.isEmpty()) {&#xa;    return Optional.of(deserialize(cachedSeats));&#xa;  }&#xa;  &#xa;  // Cache miss - load from database&#xa;  List&lt;ShowSeat&gt; seats = showSeatRepository&#xa;    .findByShowIdAndStatus(showId, SeatStatus.AVAILABLE);&#xa;  &#xa;  // Populate cache&#xa;  seats.forEach(seat -&gt; {&#xa;    redisTemplate.opsForZSet()&#xa;      .add(key, serialize(seat), seat.getPrice().doubleValue());&#xa;  });&#xa;  redisTemplate.expire(key, Duration.ofSeconds(60));&#xa;  &#xa;  return Optional.of(new ShowSeatAvailability(seats));&#xa;}&#xa;&#xa;// Rate Limiting with Redis&#xa;@RateLimiter(limit = 100, window = 60)&#xa;public boolean checkRateLimit(String userId, String endpoint) {&#xa;  String key = &quot;RATELIMIT:user:&quot; + userId + &quot;:&quot; + endpoint;&#xa;  &#xa;  Long count = redisTemplate.execute(&#xa;    RedisScript.of(RATE_LIMIT_SCRIPT, Long.class),&#xa;    Collections.singletonList(key),&#xa;    &quot;100&quot;, &quot;60&quot;&#xa;  );&#xa;  &#xa;  return count != null &amp;&amp; count &lt;= 100;&#xa;}&#xa;&#xa;// Lua Script for Atomic Rate Limiting&#xa;private static final String RATE_LIMIT_SCRIPT = &quot;&quot;&quot;&#xa;  local current = redis.call(incr, KEYS[1])&#xa;  if current == 1 then&#xa;    redis.call(expire, KEYS[1], ARGV[2])&#xa;  end&#xa;  return current&#xa;&quot;&quot;&quot;;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;fontFamily=Courier New;fontSize=9;" parent="cache-patterns" vertex="1">
          <mxGeometry y="40" width="760" height="710" as="geometry" />
        </mxCell>
        <mxCell id="monitoring-title" value="MONITORING, OBSERVABILITY &amp; DISTRIBUTED TRACING" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#6a00ff;strokeColor=#3700CC;fontSize=16;fontStyle=1;fontColor=#ffffff;" parent="1" vertex="1">
          <mxGeometry x="1000" y="3170" width="910" height="40" as="geometry" />
        </mxCell>
        <mxCell id="monitoring-stack" value="&lt;&lt;Observability Stack&gt;&gt;&#xa;Monitoring &amp; Tracing Infrastructure" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=40;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#fff2cc;strokeColor=#d6b656;" parent="1" vertex="1">
          <mxGeometry x="1004" y="3224" width="900" height="680" as="geometry" />
        </mxCell>
        <mxCell id="monitoring-content" value="1. DISTRIBUTED TRACING (Jaeger / Zipkin)&#xa;   ═══════════════════════════════════════════════════════&#xa;   - Trace ID propagated across services&#xa;   - Span per service operation&#xa;   - Visualize request flow&#xa;   &#xa;   Example Trace:&#xa;   Trace ID: 7f8a9b2c-1234-5678-90ab-cdef12345678&#xa;   ├─ [API Gateway] POST /bookings (200ms)&#xa;   │  └─ [Booking Service] createBooking (180ms)&#xa;   │     ├─ [Seat Service] lockSeats (80ms)&#xa;   │     │  ├─ [Redis] acquireLock (5ms)&#xa;   │     │  └─ [PostgreSQL] UPDATE show_seats (70ms)&#xa;   │     └─ [Payment Service] initiatePayment (95ms)&#xa;   │        └─ [Razorpay API] createOrder (90ms)&#xa;&#xa;2. METRICS (Prometheus + Grafana)&#xa;   ═══════════════════════════════════════════════════════&#xa;   Application Metrics:&#xa;   - booking_creation_total (counter)&#xa;   - booking_creation_duration_seconds (histogram)&#xa;   - payment_success_rate (gauge)&#xa;   - seat_lock_failures_total (counter)&#xa;   - saga_compensation_total (counter)&#xa;   - cache_hit_rate (gauge)&#xa;   - kafka_consumer_lag (gauge)&#xa;   &#xa;   Infrastructure Metrics:&#xa;   - CPU, Memory, Disk usage&#xa;   - Network I/O&#xa;   - Database connection pool&#xa;   - Redis cluster health&#xa;&#xa;3. LOGGING (ELK Stack)&#xa;   ═══════════════════════════════════════════════════════&#xa;   Structured Logging Format:&#xa;   {&#xa;     &quot;timestamp&quot;: &quot;2025-10-04T10:30:45.123Z&quot;,&#xa;     &quot;level&quot;: &quot;INFO&quot;,&#xa;     &quot;service&quot;: &quot;booking-service&quot;,&#xa;     &quot;traceId&quot;: &quot;7f8a9b2c-1234-5678-90ab-cdef12345678&quot;,&#xa;     &quot;spanId&quot;: &quot;1234-5678&quot;,&#xa;     &quot;userId&quot;: &quot;user-123&quot;,&#xa;     &quot;bookingId&quot;: &quot;booking-456&quot;,&#xa;     &quot;message&quot;: &quot;Booking created successfully&quot;,&#xa;     &quot;duration&quot;: 180&#xa;   }&#xa;&#xa;4. HEALTH CHECKS&#xa;   ═══════════════════════════════════════════════════════&#xa;   /actuator/health&#xa;   - Database connectivity&#xa;   - Kafka connectivity&#xa;   - Redis connectivity&#xa;   - Disk space&#xa;   - Circuit breaker status" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;fontFamily=Courier New;fontSize=9;" parent="monitoring-stack" vertex="1">
          <mxGeometry y="40" width="900" height="640" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
